/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUrlGroupArgs } from "./CreateUrlGroupArgs";
import { UpdateUrlGroupArgs } from "./UpdateUrlGroupArgs";
import { DeleteUrlGroupArgs } from "./DeleteUrlGroupArgs";
import { UrlGroupFindManyArgs } from "./UrlGroupFindManyArgs";
import { UrlGroupFindUniqueArgs } from "./UrlGroupFindUniqueArgs";
import { UrlGroup } from "./UrlGroup";
import { UrlFindManyArgs } from "../../url/base/UrlFindManyArgs";
import { Url } from "../../url/base/Url";
import { UrlGroupService } from "../urlGroup.service";

@graphql.Resolver(() => UrlGroup)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class UrlGroupResolverBase {
  constructor(
    protected readonly service: UrlGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UrlGroup",
    action: "read",
    possession: "any",
  })
  async _urlGroupsMeta(
    @graphql.Args() args: UrlGroupFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UrlGroup])
  @nestAccessControl.UseRoles({
    resource: "UrlGroup",
    action: "read",
    possession: "any",
  })
  async urlGroups(
    @graphql.Args() args: UrlGroupFindManyArgs
  ): Promise<UrlGroup[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UrlGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UrlGroup",
    action: "read",
    possession: "own",
  })
  async urlGroup(
    @graphql.Args() args: UrlGroupFindUniqueArgs
  ): Promise<UrlGroup | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UrlGroup)
  @nestAccessControl.UseRoles({
    resource: "UrlGroup",
    action: "create",
    possession: "any",
  })
  async createUrlGroup(
    @graphql.Args() args: CreateUrlGroupArgs
  ): Promise<UrlGroup> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UrlGroup)
  @nestAccessControl.UseRoles({
    resource: "UrlGroup",
    action: "update",
    possession: "any",
  })
  async updateUrlGroup(
    @graphql.Args() args: UpdateUrlGroupArgs
  ): Promise<UrlGroup | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UrlGroup)
  @nestAccessControl.UseRoles({
    resource: "UrlGroup",
    action: "delete",
    possession: "any",
  })
  async deleteUrlGroup(
    @graphql.Args() args: DeleteUrlGroupArgs
  ): Promise<UrlGroup | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Url])
  @nestAccessControl.UseRoles({
    resource: "Url",
    action: "read",
    possession: "any",
  })
  async topicItems(
    @graphql.Parent() parent: UrlGroup,
    @graphql.Args() args: UrlFindManyArgs
  ): Promise<Url[]> {
    const results = await this.service.findTopicItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
